{"ast":null,"code":"import { CardMedia } from \"@mui/material\";\nimport { CONSTANTS } from \"../actions\";\nlet listId = 2;\nlet cardId = 5;\nconst initialState = [{\n  title: \"Prvi\",\n  id: `list-${0}`,\n  cards: [{\n    id: `card-${0}`,\n    text: \"tle je tekst\"\n  }, {\n    id: `card-${1}`,\n    text: \"tle je tekst2\"\n  }]\n}, {\n  title: \"Drugi\",\n  id: `list-${1}`,\n  cards: [{\n    id: `card-${2}`,\n    text: \"tle je tekst3\"\n  }, {\n    id: `card-${3}`,\n    text: \"tle je tekst4\"\n  }, {\n    id: `card-${4}`,\n    text: \"tle je tekst5\"\n  }]\n}];\nconst listReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  switch (action.type) {\n    case CONSTANTS.ADD_LIST:\n      const newList = {\n        title: action.payload,\n        cards: [],\n        id: `list-${listId}`\n      };\n      listId += 1;\n      return [...state, newList];\n    case CONSTANTS.ADD_CARD:\n      const newCard = {\n        text: action.payload.text,\n        id: `card-${cardId}`\n      };\n      cardId += 1;\n      const newState = state.map(list => {\n        if (list.id === action.payload.listId) {\n          return {\n            ...list,\n            cards: [...list.cards, newCard]\n          };\n        } else {\n          return list;\n        }\n      });\n      return newState;\n    default:\n      return state;\n  }\n};\nexport default listReducer;","map":{"version":3,"names":["CardMedia","CONSTANTS","listId","cardId","initialState","title","id","cards","text","listReducer","state","arguments","length","undefined","action","type","ADD_LIST","newList","payload","ADD_CARD","newCard","newState","map","list"],"sources":["C:/Users/Jernej/Documents/GitHub/drevesko/drevesko/src/reducers/listReducer.js"],"sourcesContent":["import { CardMedia } from \"@mui/material\";\r\nimport { CONSTANTS } from \"../actions\";\r\n\r\nlet listId = 2;\r\nlet cardId = 5;\r\n\r\nconst initialState = [\r\n    {\r\n        title: \"Prvi\",\r\n        id: `list-${0}`,\r\n        cards: [\r\n            {\r\n                id: `card-${0}`,\r\n                text: \"tle je tekst\"\r\n            },\r\n            {\r\n                id: `card-${1}`,\r\n                text: \"tle je tekst2\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        title: \"Drugi\",\r\n        id: `list-${1}`,\r\n        cards: [\r\n            {\r\n                id: `card-${2}`,\r\n                text: \"tle je tekst3\"\r\n            },\r\n            {\r\n                id: `card-${3}`,\r\n                text: \"tle je tekst4\"\r\n            },\r\n            {\r\n                id: `card-${4}`,\r\n                text: \"tle je tekst5\"\r\n            },\r\n        ]\r\n    }\r\n]\r\n\r\n\r\n\r\nconst listReducer = (state = initialState, action) => {\r\n    switch (action.type){\r\n        case CONSTANTS.ADD_LIST:\r\n            const newList = {\r\n                title: action.payload,\r\n                cards: [],\r\n                id: `list-${listId}`\r\n            }\r\n            listId += 1;\r\n            return [...state, newList];\r\n\r\n        case CONSTANTS.ADD_CARD:\r\n            const newCard = {\r\n                text: action.payload.text,\r\n                id: `card-${cardId}`\r\n            }\r\n            cardId += 1;\r\n\r\n            const newState = state.map(list => {\r\n                if(list.id === action.payload.listId){\r\n                    return {\r\n                        ...list,\r\n                        cards: [...list.cards, newCard]\r\n                    }\r\n                } else{\r\n                    return list;\r\n                }\r\n            })\r\n            return newState;\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default listReducer;"],"mappings":"AAAA,SAASA,SAAS,QAAQ,eAAe;AACzC,SAASC,SAAS,QAAQ,YAAY;AAEtC,IAAIC,MAAM,GAAG,CAAC;AACd,IAAIC,MAAM,GAAG,CAAC;AAEd,MAAMC,YAAY,GAAG,CACjB;EACIC,KAAK,EAAE,MAAM;EACbC,EAAE,EAAG,QAAO,CAAE,EAAC;EACfC,KAAK,EAAE,CACH;IACID,EAAE,EAAG,QAAO,CAAE,EAAC;IACfE,IAAI,EAAE;EACV,CAAC,EACD;IACIF,EAAE,EAAG,QAAO,CAAE,EAAC;IACfE,IAAI,EAAE;EACV,CAAC;AAET,CAAC,EACD;EACIH,KAAK,EAAE,OAAO;EACdC,EAAE,EAAG,QAAO,CAAE,EAAC;EACfC,KAAK,EAAE,CACH;IACID,EAAE,EAAG,QAAO,CAAE,EAAC;IACfE,IAAI,EAAE;EACV,CAAC,EACD;IACIF,EAAE,EAAG,QAAO,CAAE,EAAC;IACfE,IAAI,EAAE;EACV,CAAC,EACD;IACIF,EAAE,EAAG,QAAO,CAAE,EAAC;IACfE,IAAI,EAAE;EACV,CAAC;AAET,CAAC,CACJ;AAID,MAAMC,WAAW,GAAG,SAAAA,CAAA,EAAkC;EAAA,IAAjCC,KAAK,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAGP,YAAY;EAAA,IAAEU,MAAM,GAAAH,SAAA,CAAAC,MAAA,OAAAD,SAAA,MAAAE,SAAA;EAC7C,QAAQC,MAAM,CAACC,IAAI;IACf,KAAKd,SAAS,CAACe,QAAQ;MACnB,MAAMC,OAAO,GAAG;QACZZ,KAAK,EAAES,MAAM,CAACI,OAAO;QACrBX,KAAK,EAAE,EAAE;QACTD,EAAE,EAAG,QAAOJ,MAAO;MACvB,CAAC;MACDA,MAAM,IAAI,CAAC;MACX,OAAO,CAAC,GAAGQ,KAAK,EAAEO,OAAO,CAAC;IAE9B,KAAKhB,SAAS,CAACkB,QAAQ;MACnB,MAAMC,OAAO,GAAG;QACZZ,IAAI,EAAEM,MAAM,CAACI,OAAO,CAACV,IAAI;QACzBF,EAAE,EAAG,QAAOH,MAAO;MACvB,CAAC;MACDA,MAAM,IAAI,CAAC;MAEX,MAAMkB,QAAQ,GAAGX,KAAK,CAACY,GAAG,CAACC,IAAI,IAAI;QAC/B,IAAGA,IAAI,CAACjB,EAAE,KAAKQ,MAAM,CAACI,OAAO,CAAChB,MAAM,EAAC;UACjC,OAAO;YACH,GAAGqB,IAAI;YACPhB,KAAK,EAAE,CAAC,GAAGgB,IAAI,CAAChB,KAAK,EAAEa,OAAO;UAClC,CAAC;QACL,CAAC,MAAK;UACF,OAAOG,IAAI;QACf;MACJ,CAAC,CAAC;MACF,OAAOF,QAAQ;IAEnB;MACI,OAAOX,KAAK;EACpB;AACJ,CAAC;AAED,eAAeD,WAAW"},"metadata":{},"sourceType":"module","externalDependencies":[]}