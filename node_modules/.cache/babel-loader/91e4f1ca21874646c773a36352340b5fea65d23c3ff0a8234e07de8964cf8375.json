{"ast":null,"code":"import { CONSTANTS } from \"../actions\";\nimport initialStateData from \"../data/initialState.json\";\nconsole.log(initialStateData);\nconst listId = initialStateData.length;\nconst cardId = initialStateData.reduce((maxId, list) => {\n  return Math.max(maxId, list.cards.reduce((maxCardId, card) => {\n    return Math.max(maxCardId, parseInt(card.id.split(\"-\")[1]));\n  }, 0));\n}, 0) + 1;\nconsole.log(\"length list\", listId);\nconsole.log(\"length card\", cardId);\nconst initialState = listId > 0 ? initialStateData : [{\n  title: \"List 1\",\n  id: `list-${listId}`,\n  cards: [{\n    id: `card-${cardId}`,\n    text: \"Card 1\",\n    text_opis: \"\"\n  }]\n}];\nconst listReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  switch (action.type) {\n    case CONSTANTS.ADD_LIST:\n      {\n        const newList = {\n          title: action.payload,\n          cards: [],\n          id: `list-${listId}`\n        };\n        listId += 1;\n        const newState = [...state, newList];\n\n        //localStorage.setItem(\"state.json\", JSON.stringify(newState));\n        return newState;\n      }\n    case CONSTANTS.EDIT_CARD:\n      {\n        const {\n          text_opis,\n          text,\n          cardId,\n          listId\n        } = action.payload;\n        console.log(\"EDIT_CARD reducer called with:\", action.payload);\n        const newState = state.map(list => {\n          if (list.id === listId) {\n            const updatedCards = list.cards.map(card => {\n              if (card.id === cardId) {\n                return {\n                  ...card,\n                  text,\n                  text_opis\n                };\n              }\n              return card;\n            });\n            return {\n              ...list,\n              cards: updatedCards\n            };\n          }\n          return list;\n        });\n        return newState;\n      }\n    case CONSTANTS.KILL_CARD:\n      {\n        const {\n          listId,\n          cardId\n        } = action.payload;\n        console.log(\"KILL_CARD reducer called with:\", action.payload);\n        const newState = state.map(list => {\n          if (list.id === listId) {\n            const updatedCards = list.cards.filter(card => card.id !== cardId);\n            return {\n              ...list,\n              cards: updatedCards\n            };\n          }\n          return list;\n        });\n        return newState;\n      }\n    case CONSTANTS.ADD_CARD:\n      const newCard = {\n        text: action.payload.text,\n        text_opis: action.payload.text_opis,\n        id: `card-${cardId}`\n      };\n      cardId += 1;\n      const newState = state.map(list => {\n        if (list.id === action.payload.listId) {\n          return {\n            ...list,\n            cards: [...list.cards, newCard]\n          };\n        } else {\n          return list;\n        }\n      });\n      return newState;\n    case CONSTANTS.DRAG_HAPPENED:\n      {\n        const {\n          droppableIdStart,\n          droppableIdEnd,\n          droppableIndexStart,\n          droppableIndexEnd,\n          draggableId,\n          type\n        } = action.payload;\n        const newState = [...state];\n\n        //dragging lists around\n        if (type === \"list\") {\n          const list = newState.splice(droppableIndexStart, 1);\n          newState.splice(droppableIndexEnd, 0, ...list);\n          return newState;\n        }\n\n        //in the same list\n        if (droppableIdStart === droppableIdEnd) {\n          const list = state.find(list => droppableIdStart === list.id);\n          const card = list.cards.splice(droppableIndexStart, 1);\n          list.cards.splice(droppableIndexEnd, 0, ...card);\n        }\n        // other list\n        if (droppableIdStart !== droppableIdEnd) {\n          //find the list where the drag happened\n          const listStart = state.find(list => droppableIdStart === list.id);\n          //pull out the card from the list\n          const card = listStart.cards.splice(droppableIndexStart, 1);\n          //find the list when drag ended\n          const listEnd = state.find(list => droppableIdEnd === list.id);\n          //put the card in the list\n          listEnd.cards.splice(droppableIndexEnd, 0, ...card);\n        }\n        return newState;\n      }\n    default:\n      return state;\n  }\n};\nexport default listReducer;","map":{"version":3,"names":["CONSTANTS","initialStateData","console","log","listId","length","cardId","reduce","maxId","list","Math","max","cards","maxCardId","card","parseInt","id","split","initialState","title","text","text_opis","listReducer","state","arguments","undefined","action","type","ADD_LIST","newList","payload","newState","EDIT_CARD","map","updatedCards","KILL_CARD","filter","ADD_CARD","newCard","DRAG_HAPPENED","droppableIdStart","droppableIdEnd","droppableIndexStart","droppableIndexEnd","draggableId","splice","find","listStart","listEnd"],"sources":["C:/Users/Jernej/Documents/GitHub/drevesko/drevesko/src/reducers/listReducer.js"],"sourcesContent":["import { CONSTANTS } from \"../actions\";\r\nimport initialStateData from \"../data/initialState.json\";\r\n\r\nconsole.log(initialStateData)\r\n\r\nconst listId = initialStateData.length;\r\nconst cardId = initialStateData.reduce((maxId, list) => {\r\n    return Math.max(maxId, list.cards.reduce((maxCardId, card) => {\r\n        return Math.max(maxCardId, parseInt(card.id.split(\"-\")[1]));\r\n    }, 0));\r\n}, 0) + 1;\r\n\r\nconsole.log(\"length list\",listId)\r\nconsole.log(\"length card\",cardId)\r\n\r\nconst initialState = listId > 0\r\n  ? initialStateData\r\n  : [\r\n      {\r\n        title: \"List 1\",\r\n        id: `list-${listId}`,\r\n        cards: [\r\n          {\r\n            id: `card-${cardId}`,\r\n            text: \"Card 1\",\r\n            text_opis: \"\",\r\n          },\r\n        ],\r\n      },\r\n    ];\r\n\r\n\r\nconst listReducer = (state = initialState, action) => {\r\n    switch (action.type){\r\n        case CONSTANTS.ADD_LIST:{\r\n            const newList = {\r\n                title: action.payload,\r\n                cards: [],\r\n                id: `list-${listId}`\r\n            }\r\n            listId += 1;\r\n            const newState = [...state, newList];\r\n\r\n            //localStorage.setItem(\"state.json\", JSON.stringify(newState));\r\n            return newState;\r\n        }\r\n\r\n        case CONSTANTS.EDIT_CARD: {\r\n            const { text_opis, text, cardId, listId } = action.payload;\r\n            console.log(\"EDIT_CARD reducer called with:\", action.payload);\r\n        \r\n            const newState = state.map(list => {\r\n                if (list.id === listId) {\r\n                    const updatedCards = list.cards.map(card => {\r\n                        if (card.id === cardId) {\r\n                            return {\r\n                                ...card,\r\n                                text,\r\n                                text_opis,\r\n                            };\r\n                        }\r\n                        return card;\r\n                    });\r\n                    return {\r\n                        ...list,\r\n                        cards: updatedCards,\r\n                    };\r\n                }\r\n                return list;\r\n            });\r\n\r\n            return newState;\r\n        }\r\n        \r\n        case CONSTANTS.KILL_CARD:{\r\n            const { listId, cardId } = action.payload;\r\n            console.log(\"KILL_CARD reducer called with:\", action.payload);\r\n\r\n            const newState = state.map(list => {\r\n              if (list.id === listId) {\r\n                const updatedCards = list.cards.filter(card => card.id !== cardId);\r\n                return { ...list, cards: updatedCards };\r\n              }\r\n              return list;\r\n            });\r\n\r\n            return newState;\r\n        }\r\n          \r\n\r\n        case CONSTANTS.ADD_CARD:\r\n            const newCard = {\r\n                text: action.payload.text,\r\n                text_opis: action.payload.text_opis,\r\n                id: `card-${cardId}`\r\n            }\r\n            cardId += 1;\r\n\r\n            const newState = state.map(list => {\r\n                if(list.id === action.payload.listId){\r\n                    return {\r\n                        ...list,\r\n                        cards: [...list.cards, newCard]\r\n                    }\r\n                } else{\r\n                    return list;\r\n                }\r\n            })\r\n            return newState;\r\n        \r\n        case CONSTANTS.DRAG_HAPPENED:{\r\n            const {\r\n                droppableIdStart,\r\n                droppableIdEnd,\r\n                droppableIndexStart,\r\n                droppableIndexEnd,\r\n                draggableId,\r\n                type\r\n            } = action.payload;\r\n\r\n            const newState = [...state];\r\n\r\n            //dragging lists around\r\n            if(type === \"list\") {\r\n                const list = newState.splice(droppableIndexStart, 1);\r\n                newState.splice(droppableIndexEnd, 0, ...list);\r\n                return newState;\r\n            }\r\n\r\n            //in the same list\r\n            if(droppableIdStart === droppableIdEnd){\r\n                const list = state.find(list => droppableIdStart === list.id);\r\n                const card = list.cards.splice(droppableIndexStart, 1);\r\n                list.cards.splice(droppableIndexEnd, 0, ...card)\r\n            }\r\n            // other list\r\n            if(droppableIdStart !== droppableIdEnd){\r\n                //find the list where the drag happened\r\n                const listStart = state.find(list => droppableIdStart === list.id); \r\n                //pull out the card from the list\r\n                const card = listStart.cards.splice(droppableIndexStart, 1);\r\n                //find the list when drag ended\r\n                const listEnd = state.find(list => droppableIdEnd === list.id);\r\n                //put the card in the list\r\n                listEnd.cards.splice(droppableIndexEnd, 0, ...card);\r\n            }\r\n\r\n            return newState;\r\n        }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default listReducer;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}