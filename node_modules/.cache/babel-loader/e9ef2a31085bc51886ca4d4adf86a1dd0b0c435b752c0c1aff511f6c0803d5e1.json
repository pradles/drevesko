{"ast":null,"code":"import { CONSTANTS } from \"../actions\";\nlet listId = 2;\nlet cardId = 5;\nconst initialState = [{\n  title: \"Prvi\",\n  id: `list-${0}`,\n  cards: [{\n    id: `card-${0}`,\n    text: \"tle je tekst\",\n    text_opis: \"opis\"\n  }, {\n    id: `card-${1}`,\n    text: \"tle je tekst2\",\n    text_opis: \"opis2\"\n  }]\n}, {\n  title: \"Drugi\",\n  id: `list-${1}`,\n  cards: [{\n    id: `card-${2}`,\n    text: \"tle je tekst3\",\n    text_opis: \"opis3\"\n  }, {\n    id: `card-${3}`,\n    text: \"tle je tekst4\",\n    text_opis: \"opis4\"\n  }, {\n    id: `card-${4}`,\n    text: \"tle je tekst5\",\n    text_opis: \"opis5\"\n  }]\n}];\nconst listReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  switch (action.type) {\n    case CONSTANTS.ADD_LIST:\n      {\n        const newList = {\n          title: action.payload,\n          cards: [],\n          id: `list-${listId}`\n        };\n        listId += 1;\n        return [...state, newList];\n      }\n    case CONSTANTS.EDIT_CARD:\n      {\n        const {\n          text_opis,\n          text,\n          cardId,\n          listId\n        } = action.payload;\n        console.log(\"EDIT_CARD reducer called with:\", action.payload);\n\n        // Find the list with the matching listId\n        const listIndex = state.lists.findIndex(list => list.id === listId);\n        const list = state.lists[listIndex];\n\n        // Find the card with the matching cardId in the list's cards array\n        const cardIndex = list.cards.findIndex(card => card.id === cardId);\n        const card = list.cards[cardIndex];\n\n        // Update the text and text_opis properties of the card\n        const updatedCard = {\n          ...card,\n          text,\n          text_opis\n        };\n\n        // Create a new cards array with the updated card\n        const updatedCards = [...list.cards];\n        updatedCards[cardIndex] = updatedCard;\n\n        // Create a new list object with the updated cards array\n        const updatedList = {\n          ...list,\n          cards: updatedCards\n        };\n\n        // Create a new lists array with the updated list object\n        const updatedLists = [...state.lists];\n        updatedLists[listIndex] = updatedList;\n\n        // Return a new state object with the updated lists array\n        return {\n          ...state,\n          lists: updatedLists\n        };\n      }\n    case CONSTANTS.ADD_CARD:\n      const newCard = {\n        text: action.payload.text,\n        text_opis: action.payload.text_opis,\n        id: `card-${cardId}`\n      };\n      cardId += 1;\n      const newState = state.map(list => {\n        if (list.id === action.payload.listId) {\n          return {\n            ...list,\n            cards: [...list.cards, newCard]\n          };\n        } else {\n          return list;\n        }\n      });\n      return newState;\n    case CONSTANTS.DRAG_HAPPENED:\n      {\n        const {\n          droppableIdStart,\n          droppableIdEnd,\n          droppableIndexStart,\n          droppableIndexEnd,\n          draggableId,\n          type\n        } = action.payload;\n        const newState = [...state];\n\n        //dragging lists around\n        if (type === \"list\") {\n          const list = newState.splice(droppableIndexStart, 1);\n          newState.splice(droppableIndexEnd, 0, ...list);\n          return newState;\n        }\n\n        //in the same list\n        if (droppableIdStart === droppableIdEnd) {\n          const list = state.find(list => droppableIdStart === list.id);\n          const card = list.cards.splice(droppableIndexStart, 1);\n          list.cards.splice(droppableIndexEnd, 0, ...card);\n        }\n        // other list\n        if (droppableIdStart !== droppableIdEnd) {\n          //find the list where the drag happened\n          const listStart = state.find(list => droppableIdStart === list.id);\n          //pull out the card from the list\n          const card = listStart.cards.splice(droppableIndexStart, 1);\n          //find the list when drag ended\n          const listEnd = state.find(list => droppableIdEnd === list.id);\n          //put the card in the list\n          listEnd.cards.splice(droppableIndexEnd, 0, ...card);\n        }\n        return newState;\n      }\n    default:\n      return state;\n  }\n};\nexport default listReducer;","map":{"version":3,"names":["CONSTANTS","listId","cardId","initialState","title","id","cards","text","text_opis","listReducer","state","arguments","length","undefined","action","type","ADD_LIST","newList","payload","EDIT_CARD","console","log","listIndex","lists","findIndex","list","cardIndex","card","updatedCard","updatedCards","updatedList","updatedLists","ADD_CARD","newCard","newState","map","DRAG_HAPPENED","droppableIdStart","droppableIdEnd","droppableIndexStart","droppableIndexEnd","draggableId","splice","find","listStart","listEnd"],"sources":["C:/Users/Jernej/Documents/GitHub/drevesko/drevesko/src/reducers/listReducer.js"],"sourcesContent":["import { CONSTANTS } from \"../actions\";\r\n\r\nlet listId = 2;\r\nlet cardId = 5;\r\n\r\nconst initialState = [\r\n    {\r\n        title: \"Prvi\",\r\n        id: `list-${0}`,\r\n        cards: [\r\n            {\r\n                id: `card-${0}`,\r\n                text: \"tle je tekst\",\r\n                text_opis: \"opis\"\r\n            },\r\n            {\r\n                id: `card-${1}`,\r\n                text: \"tle je tekst2\",\r\n                text_opis: \"opis2\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        title: \"Drugi\",\r\n        id: `list-${1}`,\r\n        cards: [\r\n            {\r\n                id: `card-${2}`,\r\n                text: \"tle je tekst3\",\r\n                text_opis: \"opis3\"\r\n            },\r\n            {\r\n                id: `card-${3}`,\r\n                text: \"tle je tekst4\",\r\n                text_opis: \"opis4\"\r\n            },\r\n            {\r\n                id: `card-${4}`,\r\n                text: \"tle je tekst5\",\r\n                text_opis: \"opis5\"\r\n            },\r\n        ]\r\n    }\r\n]\r\n\r\n\r\n\r\nconst listReducer = (state = initialState, action) => {\r\n    switch (action.type){\r\n        case CONSTANTS.ADD_LIST:{\r\n            const newList = {\r\n                title: action.payload,\r\n                cards: [],\r\n                id: `list-${listId}`\r\n            }\r\n            listId += 1;\r\n            return [...state, newList];\r\n        }\r\n\r\n        case CONSTANTS.EDIT_CARD: {\r\n            const { text_opis, text, cardId, listId } = action.payload;\r\n            console.log(\"EDIT_CARD reducer called with:\", action.payload);\r\n          \r\n            // Find the list with the matching listId\r\n            const listIndex = state.lists.findIndex(list => list.id === listId);\r\n            const list = state.lists[listIndex];\r\n          \r\n            // Find the card with the matching cardId in the list's cards array\r\n            const cardIndex = list.cards.findIndex(card => card.id === cardId);\r\n            const card = list.cards[cardIndex];\r\n          \r\n            // Update the text and text_opis properties of the card\r\n            const updatedCard = {\r\n              ...card,\r\n              text,\r\n              text_opis,\r\n            };\r\n          \r\n            // Create a new cards array with the updated card\r\n            const updatedCards = [...list.cards];\r\n            updatedCards[cardIndex] = updatedCard;\r\n          \r\n            // Create a new list object with the updated cards array\r\n            const updatedList = {\r\n              ...list,\r\n              cards: updatedCards,\r\n            };\r\n          \r\n            // Create a new lists array with the updated list object\r\n            const updatedLists = [...state.lists];\r\n            updatedLists[listIndex] = updatedList;\r\n          \r\n            // Return a new state object with the updated lists array\r\n            return {\r\n              ...state,\r\n              lists: updatedLists,\r\n            };\r\n          }\r\n          \r\n          \r\n\r\n        case CONSTANTS.ADD_CARD:\r\n            const newCard = {\r\n                text: action.payload.text,\r\n                text_opis: action.payload.text_opis,\r\n                id: `card-${cardId}`\r\n            }\r\n            cardId += 1;\r\n\r\n            const newState = state.map(list => {\r\n                if(list.id === action.payload.listId){\r\n                    return {\r\n                        ...list,\r\n                        cards: [...list.cards, newCard]\r\n                    }\r\n                } else{\r\n                    return list;\r\n                }\r\n            })\r\n            return newState;\r\n        \r\n        case CONSTANTS.DRAG_HAPPENED:{\r\n            const {\r\n                droppableIdStart,\r\n                droppableIdEnd,\r\n                droppableIndexStart,\r\n                droppableIndexEnd,\r\n                draggableId,\r\n                type\r\n            } = action.payload;\r\n\r\n            const newState = [...state];\r\n\r\n            //dragging lists around\r\n            if(type === \"list\") {\r\n                const list = newState.splice(droppableIndexStart, 1);\r\n                newState.splice(droppableIndexEnd, 0, ...list);\r\n                return newState;\r\n            }\r\n\r\n            //in the same list\r\n            if(droppableIdStart === droppableIdEnd){\r\n                const list = state.find(list => droppableIdStart === list.id);\r\n                const card = list.cards.splice(droppableIndexStart, 1);\r\n                list.cards.splice(droppableIndexEnd, 0, ...card)\r\n            }\r\n            // other list\r\n            if(droppableIdStart !== droppableIdEnd){\r\n                //find the list where the drag happened\r\n                const listStart = state.find(list => droppableIdStart === list.id); \r\n                //pull out the card from the list\r\n                const card = listStart.cards.splice(droppableIndexStart, 1);\r\n                //find the list when drag ended\r\n                const listEnd = state.find(list => droppableIdEnd === list.id);\r\n                //put the card in the list\r\n                listEnd.cards.splice(droppableIndexEnd, 0, ...card);\r\n            }\r\n\r\n            return newState;\r\n        }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default listReducer;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}