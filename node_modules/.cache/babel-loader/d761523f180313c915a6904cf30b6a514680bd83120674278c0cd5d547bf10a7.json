{"ast":null,"code":"import { CONSTANTS } from \"../actions\";\nlet listId = 2;\nlet cardId = 5;\nconst initialState = [{\n  title: \"Prvi\",\n  id: `list-${0}`,\n  cards: [{\n    id: `card-${0}`,\n    text: \"tle je tekst\",\n    text_opis: \"opis\"\n  }, {\n    id: `card-${1}`,\n    text: \"tle je tekst2\",\n    text_opis: \"opis2\"\n  }]\n}, {\n  title: \"Drugi\",\n  id: `list-${1}`,\n  cards: [{\n    id: `card-${2}`,\n    text: \"tle je tekst3\",\n    text_opis: \"opis3\"\n  }, {\n    id: `card-${3}`,\n    text: \"tle je tekst4\",\n    text_opis: \"opis4\"\n  }, {\n    id: `card-${4}`,\n    text: \"tle je tekst5\",\n    text_opis: \"opis5\"\n  }]\n}];\nconst listReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  switch (action.type) {\n    case CONSTANTS.ADD_LIST:\n      {\n        const newList = {\n          title: action.payload,\n          cards: [],\n          id: `list-${listId}`\n        };\n        listId += 1;\n        return [...state, newList];\n      }\n    case CONSTANTS.EDIT_CARD:\n      {\n        const {\n          text_opis,\n          text,\n          cardId,\n          listId\n        } = action.payload;\n        console.log(\"EDIT_CARD reducer called with:\", action.payload);\n        const newState = state.map(list => {\n          if (list.id === action.payload.listId) {\n            list.map(card => {\n              if (card.id == action.payload.cardId) {\n                card.text = text;\n                card.text_opis = text_opis;\n                return;\n              }\n            });\n            return {\n              ...list,\n              cards: [...list.cards, newCard]\n            };\n          } else {\n            return list;\n          }\n        });\n        return newState;\n      }\n    case CONSTANTS.ADD_CARD:\n      const newCard = {\n        text: action.payload.text,\n        text_opis: action.payload.text_opis,\n        id: `card-${cardId}`\n      };\n      cardId += 1;\n      const newState = state.map(list => {\n        if (list.id === action.payload.listId) {\n          return {\n            ...list,\n            cards: [...list.cards, newCard]\n          };\n        } else {\n          return list;\n        }\n      });\n      return newState;\n    case CONSTANTS.DRAG_HAPPENED:\n      {\n        const {\n          droppableIdStart,\n          droppableIdEnd,\n          droppableIndexStart,\n          droppableIndexEnd,\n          draggableId,\n          type\n        } = action.payload;\n        const newState = [...state];\n\n        //dragging lists around\n        if (type === \"list\") {\n          const list = newState.splice(droppableIndexStart, 1);\n          newState.splice(droppableIndexEnd, 0, ...list);\n          return newState;\n        }\n\n        //in the same list\n        if (droppableIdStart === droppableIdEnd) {\n          const list = state.find(list => droppableIdStart === list.id);\n          const card = list.cards.splice(droppableIndexStart, 1);\n          list.cards.splice(droppableIndexEnd, 0, ...card);\n        }\n        // other list\n        if (droppableIdStart !== droppableIdEnd) {\n          //find the list where the drag happened\n          const listStart = state.find(list => droppableIdStart === list.id);\n          //pull out the card from the list\n          const card = listStart.cards.splice(droppableIndexStart, 1);\n          //find the list when drag ended\n          const listEnd = state.find(list => droppableIdEnd === list.id);\n          //put the card in the list\n          listEnd.cards.splice(droppableIndexEnd, 0, ...card);\n        }\n        return newState;\n      }\n    default:\n      return state;\n  }\n};\nexport default listReducer;","map":{"version":3,"names":["CONSTANTS","listId","cardId","initialState","title","id","cards","text","text_opis","listReducer","state","arguments","length","undefined","action","type","ADD_LIST","newList","payload","EDIT_CARD","console","log","newState","map","list","card","newCard","ADD_CARD","DRAG_HAPPENED","droppableIdStart","droppableIdEnd","droppableIndexStart","droppableIndexEnd","draggableId","splice","find","listStart","listEnd"],"sources":["C:/Users/Jernej/Documents/GitHub/drevesko/drevesko/src/reducers/listReducer.js"],"sourcesContent":["import { CONSTANTS } from \"../actions\";\r\n\r\nlet listId = 2;\r\nlet cardId = 5;\r\n\r\nconst initialState = [\r\n    {\r\n        title: \"Prvi\",\r\n        id: `list-${0}`,\r\n        cards: [\r\n            {\r\n                id: `card-${0}`,\r\n                text: \"tle je tekst\",\r\n                text_opis: \"opis\"\r\n            },\r\n            {\r\n                id: `card-${1}`,\r\n                text: \"tle je tekst2\",\r\n                text_opis: \"opis2\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        title: \"Drugi\",\r\n        id: `list-${1}`,\r\n        cards: [\r\n            {\r\n                id: `card-${2}`,\r\n                text: \"tle je tekst3\",\r\n                text_opis: \"opis3\"\r\n            },\r\n            {\r\n                id: `card-${3}`,\r\n                text: \"tle je tekst4\",\r\n                text_opis: \"opis4\"\r\n            },\r\n            {\r\n                id: `card-${4}`,\r\n                text: \"tle je tekst5\",\r\n                text_opis: \"opis5\"\r\n            },\r\n        ]\r\n    }\r\n]\r\n\r\n\r\n\r\nconst listReducer = (state = initialState, action) => {\r\n    switch (action.type){\r\n        case CONSTANTS.ADD_LIST:{\r\n            const newList = {\r\n                title: action.payload,\r\n                cards: [],\r\n                id: `list-${listId}`\r\n            }\r\n            listId += 1;\r\n            return [...state, newList];\r\n        }\r\n\r\n        case CONSTANTS.EDIT_CARD: {\r\n            const { text_opis, text, cardId, listId } = action.payload;\r\n            console.log(\"EDIT_CARD reducer called with:\", action.payload);\r\n            \r\n            const newState = state.map(list => {\r\n                if(list.id === action.payload.listId){\r\n                    list.map(card => {\r\n                        if(card.id == action.payload.cardId){\r\n                            card.text = text;\r\n                            card.text_opis = text_opis;\r\n                            return;\r\n                        }\r\n                    })\r\n                    return {\r\n                        ...list,\r\n                        cards: [...list.cards, newCard]\r\n                    }\r\n                } else{\r\n                    return list;\r\n                }\r\n            })\r\n            return newState;\r\n\r\n            \r\n          }\r\n          \r\n          \r\n\r\n        case CONSTANTS.ADD_CARD:\r\n            const newCard = {\r\n                text: action.payload.text,\r\n                text_opis: action.payload.text_opis,\r\n                id: `card-${cardId}`\r\n            }\r\n            cardId += 1;\r\n\r\n            const newState = state.map(list => {\r\n                if(list.id === action.payload.listId){\r\n                    return {\r\n                        ...list,\r\n                        cards: [...list.cards, newCard]\r\n                    }\r\n                } else{\r\n                    return list;\r\n                }\r\n            })\r\n            return newState;\r\n        \r\n        case CONSTANTS.DRAG_HAPPENED:{\r\n            const {\r\n                droppableIdStart,\r\n                droppableIdEnd,\r\n                droppableIndexStart,\r\n                droppableIndexEnd,\r\n                draggableId,\r\n                type\r\n            } = action.payload;\r\n\r\n            const newState = [...state];\r\n\r\n            //dragging lists around\r\n            if(type === \"list\") {\r\n                const list = newState.splice(droppableIndexStart, 1);\r\n                newState.splice(droppableIndexEnd, 0, ...list);\r\n                return newState;\r\n            }\r\n\r\n            //in the same list\r\n            if(droppableIdStart === droppableIdEnd){\r\n                const list = state.find(list => droppableIdStart === list.id);\r\n                const card = list.cards.splice(droppableIndexStart, 1);\r\n                list.cards.splice(droppableIndexEnd, 0, ...card)\r\n            }\r\n            // other list\r\n            if(droppableIdStart !== droppableIdEnd){\r\n                //find the list where the drag happened\r\n                const listStart = state.find(list => droppableIdStart === list.id); \r\n                //pull out the card from the list\r\n                const card = listStart.cards.splice(droppableIndexStart, 1);\r\n                //find the list when drag ended\r\n                const listEnd = state.find(list => droppableIdEnd === list.id);\r\n                //put the card in the list\r\n                listEnd.cards.splice(droppableIndexEnd, 0, ...card);\r\n            }\r\n\r\n            return newState;\r\n        }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default listReducer;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}