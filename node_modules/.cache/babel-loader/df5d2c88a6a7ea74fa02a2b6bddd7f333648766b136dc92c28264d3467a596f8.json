{"ast":null,"code":"import { CONSTANTS } from \"../actions\";\nimport initialStateData from \"../data/initialState.json\";\nlet listId = initialStateData.lists.length;\nlet cardId = 0;\nconst initialState = initialStateData.lists.length ? initialStateData.lists : [{\n  title: \"List 1\",\n  id: `list-${listId}`,\n  cards: [{\n    id: `card-${cardId}`,\n    text: \"Card 1\",\n    text_opis: \"\"\n  }]\n}];\nconst listReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  switch (action.type) {\n    case CONSTANTS.ADD_LIST:\n      {\n        const newList = {\n          title: action.payload,\n          cards: [],\n          id: `list-${listId}`\n        };\n        listId += 1;\n        return [...state, newList];\n      }\n    case CONSTANTS.EDIT_CARD:\n      {\n        const {\n          text_opis,\n          text,\n          cardId,\n          listId\n        } = action.payload;\n        console.log(\"EDIT_CARD reducer called with:\", action.payload);\n        const newState = state.map(list => {\n          if (list.id === listId) {\n            const updatedCards = list.cards.map(card => {\n              if (card.id === cardId) {\n                return {\n                  ...card,\n                  text,\n                  text_opis\n                };\n              }\n              return card;\n            });\n            return {\n              ...list,\n              cards: updatedCards\n            };\n          }\n          return list;\n        });\n        return newState;\n      }\n    case CONSTANTS.KILL_CARD:\n      {\n        const {\n          listId,\n          cardId\n        } = action.payload;\n        console.log(\"KILL_CARD reducer called with:\", action.payload);\n        const updatedLists = state.map(list => {\n          if (list.id === listId) {\n            const updatedCards = list.cards.filter(card => card.id !== cardId);\n            return {\n              ...list,\n              cards: updatedCards\n            };\n          }\n          return list;\n        });\n        return updatedLists;\n      }\n    case CONSTANTS.ADD_CARD:\n      const newCard = {\n        text: action.payload.text,\n        text_opis: action.payload.text_opis,\n        id: `card-${cardId}`\n      };\n      cardId += 1;\n      const newState = state.map(list => {\n        if (list.id === action.payload.listId) {\n          return {\n            ...list,\n            cards: [...list.cards, newCard]\n          };\n        } else {\n          return list;\n        }\n      });\n      return newState;\n    case CONSTANTS.DRAG_HAPPENED:\n      {\n        const {\n          droppableIdStart,\n          droppableIdEnd,\n          droppableIndexStart,\n          droppableIndexEnd,\n          draggableId,\n          type\n        } = action.payload;\n        const newState = [...state];\n\n        //dragging lists around\n        if (type === \"list\") {\n          const list = newState.splice(droppableIndexStart, 1);\n          newState.splice(droppableIndexEnd, 0, ...list);\n          return newState;\n        }\n\n        //in the same list\n        if (droppableIdStart === droppableIdEnd) {\n          const list = state.find(list => droppableIdStart === list.id);\n          const card = list.cards.splice(droppableIndexStart, 1);\n          list.cards.splice(droppableIndexEnd, 0, ...card);\n        }\n        // other list\n        if (droppableIdStart !== droppableIdEnd) {\n          //find the list where the drag happened\n          const listStart = state.find(list => droppableIdStart === list.id);\n          //pull out the card from the list\n          const card = listStart.cards.splice(droppableIndexStart, 1);\n          //find the list when drag ended\n          const listEnd = state.find(list => droppableIdEnd === list.id);\n          //put the card in the list\n          listEnd.cards.splice(droppableIndexEnd, 0, ...card);\n        }\n        return newState;\n      }\n    default:\n      return state;\n  }\n};\nexport default listReducer;","map":{"version":3,"names":["CONSTANTS","initialStateData","listId","lists","length","cardId","initialState","title","id","cards","text","text_opis","listReducer","state","arguments","undefined","action","type","ADD_LIST","newList","payload","EDIT_CARD","console","log","newState","map","list","updatedCards","card","KILL_CARD","updatedLists","filter","ADD_CARD","newCard","DRAG_HAPPENED","droppableIdStart","droppableIdEnd","droppableIndexStart","droppableIndexEnd","draggableId","splice","find","listStart","listEnd"],"sources":["C:/Users/Jernej/Documents/GitHub/drevesko/drevesko/src/reducers/listReducer.js"],"sourcesContent":["import { CONSTANTS } from \"../actions\";\r\nimport initialStateData from \"../data/initialState.json\";\r\n\r\nlet listId = initialStateData.lists.length;\r\nlet cardId = 0;\r\n\r\nconst initialState = initialStateData.lists.length\r\n  ? initialStateData.lists\r\n  : [\r\n      {\r\n        title: \"List 1\",\r\n        id: `list-${listId}`,\r\n        cards: [\r\n          {\r\n            id: `card-${cardId}`,\r\n            text: \"Card 1\",\r\n            text_opis: \"\",\r\n          },\r\n        ],\r\n      },\r\n    ];\r\n\r\n\r\n\r\nconst listReducer = (state = initialState, action) => {\r\n    switch (action.type){\r\n        case CONSTANTS.ADD_LIST:{\r\n            const newList = {\r\n                title: action.payload,\r\n                cards: [],\r\n                id: `list-${listId}`\r\n            }\r\n            listId += 1;\r\n            return [...state, newList];\r\n        }\r\n\r\n        case CONSTANTS.EDIT_CARD: {\r\n            const { text_opis, text, cardId, listId } = action.payload;\r\n            console.log(\"EDIT_CARD reducer called with:\", action.payload);\r\n        \r\n            const newState = state.map(list => {\r\n                if (list.id === listId) {\r\n                    const updatedCards = list.cards.map(card => {\r\n                        if (card.id === cardId) {\r\n                            return {\r\n                                ...card,\r\n                                text,\r\n                                text_opis,\r\n                            };\r\n                        }\r\n                        return card;\r\n                    });\r\n                    return {\r\n                        ...list,\r\n                        cards: updatedCards,\r\n                    };\r\n                }\r\n                return list;\r\n            });\r\n        \r\n            return newState;\r\n        }\r\n        \r\n        case CONSTANTS.KILL_CARD:{\r\n            const { listId, cardId } = action.payload;\r\n            console.log(\"KILL_CARD reducer called with:\", action.payload);\r\n\r\n            const updatedLists = state.map(list => {\r\n              if (list.id === listId) {\r\n                const updatedCards = list.cards.filter(card => card.id !== cardId);\r\n                return { ...list, cards: updatedCards };\r\n              }\r\n              return list;\r\n            });\r\n\r\n            return updatedLists;\r\n        }\r\n          \r\n\r\n        case CONSTANTS.ADD_CARD:\r\n            const newCard = {\r\n                text: action.payload.text,\r\n                text_opis: action.payload.text_opis,\r\n                id: `card-${cardId}`\r\n            }\r\n            cardId += 1;\r\n\r\n            const newState = state.map(list => {\r\n                if(list.id === action.payload.listId){\r\n                    return {\r\n                        ...list,\r\n                        cards: [...list.cards, newCard]\r\n                    }\r\n                } else{\r\n                    return list;\r\n                }\r\n            })\r\n            return newState;\r\n        \r\n        case CONSTANTS.DRAG_HAPPENED:{\r\n            const {\r\n                droppableIdStart,\r\n                droppableIdEnd,\r\n                droppableIndexStart,\r\n                droppableIndexEnd,\r\n                draggableId,\r\n                type\r\n            } = action.payload;\r\n\r\n            const newState = [...state];\r\n\r\n            //dragging lists around\r\n            if(type === \"list\") {\r\n                const list = newState.splice(droppableIndexStart, 1);\r\n                newState.splice(droppableIndexEnd, 0, ...list);\r\n                return newState;\r\n            }\r\n\r\n            //in the same list\r\n            if(droppableIdStart === droppableIdEnd){\r\n                const list = state.find(list => droppableIdStart === list.id);\r\n                const card = list.cards.splice(droppableIndexStart, 1);\r\n                list.cards.splice(droppableIndexEnd, 0, ...card)\r\n            }\r\n            // other list\r\n            if(droppableIdStart !== droppableIdEnd){\r\n                //find the list where the drag happened\r\n                const listStart = state.find(list => droppableIdStart === list.id); \r\n                //pull out the card from the list\r\n                const card = listStart.cards.splice(droppableIndexStart, 1);\r\n                //find the list when drag ended\r\n                const listEnd = state.find(list => droppableIdEnd === list.id);\r\n                //put the card in the list\r\n                listEnd.cards.splice(droppableIndexEnd, 0, ...card);\r\n            }\r\n\r\n            return newState;\r\n        }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default listReducer;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}