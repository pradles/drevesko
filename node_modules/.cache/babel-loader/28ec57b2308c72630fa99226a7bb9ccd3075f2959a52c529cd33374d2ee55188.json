{"ast":null,"code":"import { CONSTANTS } from \"../actions\";\nlet listId = 2;\nlet cardId = 5;\nconst initialState = [{\n  title: \"Prvi\",\n  id: `list-${0}`,\n  cards: [{\n    id: `card-${0}`,\n    text: \"tle je tekst\",\n    text_opis: \"opis\"\n  }, {\n    id: `card-${1}`,\n    text: \"tle je tekst2\",\n    text_opis: \"opis2\"\n  }]\n}, {\n  title: \"Drugi\",\n  id: `list-${1}`,\n  cards: [{\n    id: `card-${2}`,\n    text: \"tle je tekst3\",\n    text_opis: \"opis3\"\n  }, {\n    id: `card-${3}`,\n    text: \"tle je tekst4\",\n    text_opis: \"opis4\"\n  }, {\n    id: `card-${4}`,\n    text: \"tle je tekst5\",\n    text_opis: \"opis5\"\n  }]\n}];\nconst listReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  switch (action.type) {\n    case CONSTANTS.ADD_LIST:\n      const newList = {\n        title: action.payload,\n        cards: [],\n        id: `list-${listId}`\n      };\n      listId += 1;\n      return [...state, newList];\n    case CONSTANTS.ADD_CARD:\n      const newCard = {\n        text: action.payload.text,\n        id: `card-${cardId}`\n      };\n      cardId += 1;\n      const newState = state.map(list => {\n        if (list.id === action.payload.listId) {\n          return {\n            ...list,\n            cards: [...list.cards, newCard]\n          };\n        } else {\n          return list;\n        }\n      });\n      return newState;\n    case CONSTANTS.DRAG_HAPPENED:\n      {\n        const {\n          droppableIdStart,\n          droppableIdEnd,\n          droppableIndexStart,\n          droppableIndexEnd,\n          draggableId,\n          type\n        } = action.payload;\n        const newState = [...state];\n\n        //dragging lists around\n        if (type === \"list\") {\n          const list = newState.splice(droppableIndexStart, 1);\n          newState.splice(droppableIndexEnd, 0, ...list);\n          return newState;\n        }\n\n        //in the same list\n        if (droppableIdStart === droppableIdEnd) {\n          const list = state.find(list => droppableIdStart === list.id);\n          const card = list.cards.splice(droppableIndexStart, 1);\n          list.cards.splice(droppableIndexEnd, 0, ...card);\n        }\n        // other list\n        if (droppableIdStart !== droppableIdEnd) {\n          //find the list where the drag happened\n          const listStart = state.find(list => droppableIdStart === list.id);\n          //pull out the card from the list\n          const card = listStart.cards.splice(droppableIndexStart, 1);\n          //find the list when drag ended\n          const listEnd = state.find(list => droppableIdEnd === list.id);\n          //put the card in the list\n          listEnd.cards.splice(droppableIndexEnd, 0, ...card);\n        }\n        return newState;\n      }\n    default:\n      return state;\n  }\n};\nexport default listReducer;","map":{"version":3,"names":["CONSTANTS","listId","cardId","initialState","title","id","cards","text","text_opis","listReducer","state","arguments","length","undefined","action","type","ADD_LIST","newList","payload","ADD_CARD","newCard","newState","map","list","DRAG_HAPPENED","droppableIdStart","droppableIdEnd","droppableIndexStart","droppableIndexEnd","draggableId","splice","find","card","listStart","listEnd"],"sources":["C:/Users/Jernej/Documents/GitHub/drevesko/drevesko/src/reducers/listReducer.js"],"sourcesContent":["import { CONSTANTS } from \"../actions\";\r\n\r\nlet listId = 2;\r\nlet cardId = 5;\r\n\r\nconst initialState = [\r\n    {\r\n        title: \"Prvi\",\r\n        id: `list-${0}`,\r\n        cards: [\r\n            {\r\n                id: `card-${0}`,\r\n                text: \"tle je tekst\",\r\n                text_opis: \"opis\"\r\n            },\r\n            {\r\n                id: `card-${1}`,\r\n                text: \"tle je tekst2\",\r\n                text_opis: \"opis2\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        title: \"Drugi\",\r\n        id: `list-${1}`,\r\n        cards: [\r\n            {\r\n                id: `card-${2}`,\r\n                text: \"tle je tekst3\",\r\n                text_opis: \"opis3\"\r\n            },\r\n            {\r\n                id: `card-${3}`,\r\n                text: \"tle je tekst4\",\r\n                text_opis: \"opis4\"\r\n            },\r\n            {\r\n                id: `card-${4}`,\r\n                text: \"tle je tekst5\",\r\n                text_opis: \"opis5\"\r\n            },\r\n        ]\r\n    }\r\n]\r\n\r\n\r\n\r\nconst listReducer = (state = initialState, action) => {\r\n    switch (action.type){\r\n        case CONSTANTS.ADD_LIST:\r\n            const newList = {\r\n                title: action.payload,\r\n                cards: [],\r\n                id: `list-${listId}`\r\n            }\r\n            listId += 1;\r\n            return [...state, newList];\r\n\r\n        case CONSTANTS.ADD_CARD:\r\n            const newCard = {\r\n                text: action.payload.text,\r\n                id: `card-${cardId}`\r\n            }\r\n            cardId += 1;\r\n\r\n            const newState = state.map(list => {\r\n                if(list.id === action.payload.listId){\r\n                    return {\r\n                        ...list,\r\n                        cards: [...list.cards, newCard]\r\n                    }\r\n                } else{\r\n                    return list;\r\n                }\r\n            })\r\n            return newState;\r\n        \r\n        case CONSTANTS.DRAG_HAPPENED:{\r\n            const {\r\n                droppableIdStart,\r\n                droppableIdEnd,\r\n                droppableIndexStart,\r\n                droppableIndexEnd,\r\n                draggableId,\r\n                type\r\n            } = action.payload;\r\n\r\n            const newState = [...state];\r\n\r\n            //dragging lists around\r\n            if(type === \"list\") {\r\n                const list = newState.splice(droppableIndexStart, 1);\r\n                newState.splice(droppableIndexEnd, 0, ...list);\r\n                return newState;\r\n            }\r\n\r\n            //in the same list\r\n            if(droppableIdStart === droppableIdEnd){\r\n                const list = state.find(list => droppableIdStart === list.id);\r\n                const card = list.cards.splice(droppableIndexStart, 1);\r\n                list.cards.splice(droppableIndexEnd, 0, ...card)\r\n            }\r\n            // other list\r\n            if(droppableIdStart !== droppableIdEnd){\r\n                //find the list where the drag happened\r\n                const listStart = state.find(list => droppableIdStart === list.id); \r\n                //pull out the card from the list\r\n                const card = listStart.cards.splice(droppableIndexStart, 1);\r\n                //find the list when drag ended\r\n                const listEnd = state.find(list => droppableIdEnd === list.id);\r\n                //put the card in the list\r\n                listEnd.cards.splice(droppableIndexEnd, 0, ...card);\r\n            }\r\n\r\n            return newState;\r\n        }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default listReducer;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}