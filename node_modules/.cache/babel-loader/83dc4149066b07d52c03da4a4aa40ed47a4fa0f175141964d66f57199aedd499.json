{"ast":null,"code":"import _objectSpread from\"C:/Users/Jernej/Documents/GitHub/drevesko/drevesko/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import _toConsumableArray from\"C:/Users/Jernej/Documents/GitHub/drevesko/drevesko/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";import{CONSTANTS}from\"../actions\";import initialStateData from\"../data/initialState.json\";//import fs from 'fs';\n//console.log(initialStateData)\nvar listId=initialStateData.length;var cardId=initialStateData.reduce(function(maxId,list){return Math.max(maxId,list.cards.reduce(function(maxCardId,card){return Math.max(maxCardId,parseInt(card.id.split(\"-\")[1]));},0));},0)+1;//console.log(\"length list\",listId)\n//console.log(\"length card\",cardId)\nvar initialState=listId>0?initialStateData:[{title:\"List 1\",id:\"list-\".concat(listId),cards:[{id:\"card-\".concat(cardId),text:\"Card 1\",text_opis:\"\"}]}];var listReducer=function listReducer(){var state=arguments.length>0&&arguments[0]!==undefined?arguments[0]:initialState;var action=arguments.length>1?arguments[1]:undefined;switch(action.type){case CONSTANTS.ADD_LIST:{var newList={title:action.payload,cards:[],id:\"list-\".concat(listId)};listId+=1;var newState=[].concat(_toConsumableArray(state),[newList]);//fs.writeFileSync('../data/initialState.json', JSON.stringify(newState));\n//localStorage.setItem(\"state.json\", JSON.stringify(newState));\nreturn newState;}case CONSTANTS.EDIT_CARD:{var _action$payload=action.payload,text_opis=_action$payload.text_opis,text=_action$payload.text,_cardId=_action$payload.cardId,_listId=_action$payload.listId;console.log(\"EDIT_CARD reducer called with:\",action.payload);var _newState=state.map(function(list){if(list.id===_listId){var updatedCards=list.cards.map(function(card){if(card.id===_cardId){return _objectSpread(_objectSpread({},card),{},{text:text,text_opis:text_opis});}return card;});return _objectSpread(_objectSpread({},list),{},{cards:updatedCards});}return list;});return _newState;}case CONSTANTS.KILL_CARD:{var _action$payload2=action.payload,_listId2=_action$payload2.listId,_cardId2=_action$payload2.cardId;console.log(\"KILL_CARD reducer called with:\",action.payload);var _newState2=state.map(function(list){if(list.id===_listId2){var updatedCards=list.cards.filter(function(card){return card.id!==_cardId2;});return _objectSpread(_objectSpread({},list),{},{cards:updatedCards});}return list;});return _newState2;}case CONSTANTS.ADD_CARD:{var newCard={text:action.payload.text,text_opis:action.payload.text_opis,id:\"card-\".concat(cardId)};cardId+=1;var _newState3=state.map(function(list){if(list.id===action.payload.listId){return _objectSpread(_objectSpread({},list),{},{cards:[].concat(_toConsumableArray(list.cards),[newCard])});}else{return list;}});return _newState3;}case CONSTANTS.DRAG_HAPPENED:{var _action$payload3=action.payload,droppableIdStart=_action$payload3.droppableIdStart,droppableIdEnd=_action$payload3.droppableIdEnd,droppableIndexStart=_action$payload3.droppableIndexStart,droppableIndexEnd=_action$payload3.droppableIndexEnd,draggableId=_action$payload3.draggableId,type=_action$payload3.type;var _newState4=_toConsumableArray(state);//dragging lists around\nif(type===\"list\"){var list=_newState4.splice(droppableIndexStart,1);_newState4.splice.apply(_newState4,[droppableIndexEnd,0].concat(_toConsumableArray(list)));return _newState4;}//in the same list\nif(droppableIdStart===droppableIdEnd){var _list$cards;var _list=state.find(function(list){return droppableIdStart===list.id;});var card=_list.cards.splice(droppableIndexStart,1);(_list$cards=_list.cards).splice.apply(_list$cards,[droppableIndexEnd,0].concat(_toConsumableArray(card)));}// other list\nif(droppableIdStart!==droppableIdEnd){var _listEnd$cards;//find the list where the drag happened\nvar listStart=state.find(function(list){return droppableIdStart===list.id;});//pull out the card from the list\nvar _card=listStart.cards.splice(droppableIndexStart,1);//find the list when drag ended\nvar listEnd=state.find(function(list){return droppableIdEnd===list.id;});//put the card in the list\n(_listEnd$cards=listEnd.cards).splice.apply(_listEnd$cards,[droppableIndexEnd,0].concat(_toConsumableArray(_card)));}return _newState4;}default:return state;}};export default listReducer;","map":{"version":3,"names":["CONSTANTS","initialStateData","listId","length","cardId","reduce","maxId","list","Math","max","cards","maxCardId","card","parseInt","id","split","initialState","title","concat","text","text_opis","listReducer","state","arguments","undefined","action","type","ADD_LIST","newList","payload","newState","_toConsumableArray","EDIT_CARD","_action$payload","console","log","map","updatedCards","_objectSpread","KILL_CARD","_action$payload2","filter","ADD_CARD","newCard","DRAG_HAPPENED","_action$payload3","droppableIdStart","droppableIdEnd","droppableIndexStart","droppableIndexEnd","draggableId","splice","apply","_list$cards","find","_listEnd$cards","listStart","listEnd"],"sources":["C:/Users/Jernej/Documents/GitHub/drevesko/drevesko/src/reducers/listReducer.js"],"sourcesContent":["import { CONSTANTS } from \"../actions\";\r\nimport initialStateData from \"../data/initialState.json\";\r\n//import fs from 'fs';\r\n\r\n\r\n//console.log(initialStateData)\r\n\r\nlet listId = initialStateData.length;\r\nlet cardId = initialStateData.reduce((maxId, list) => {\r\n    return Math.max(maxId, list.cards.reduce((maxCardId, card) => {\r\n        return Math.max(maxCardId, parseInt(card.id.split(\"-\")[1]));\r\n    }, 0));\r\n}, 0) + 1;\r\n\r\n//console.log(\"length list\",listId)\r\n//console.log(\"length card\",cardId)\r\n\r\nconst initialState = listId > 0\r\n  ? initialStateData\r\n  : [\r\n      {\r\n        title: \"List 1\",\r\n        id: `list-${listId}`,\r\n        cards: [\r\n          {\r\n            id: `card-${cardId}`,\r\n            text: \"Card 1\",\r\n            text_opis: \"\",\r\n          },\r\n        ],\r\n      },\r\n    ];\r\n\r\n\r\nconst listReducer = (state = initialState, action) => {\r\n    switch (action.type){\r\n        case CONSTANTS.ADD_LIST:{\r\n            const newList = {\r\n                title: action.payload,\r\n                cards: [],\r\n                id: `list-${listId}`\r\n            }\r\n            listId += 1;\r\n            const newState = [...state, newList];\r\n            \r\n            //fs.writeFileSync('../data/initialState.json', JSON.stringify(newState));\r\n\r\n            //localStorage.setItem(\"state.json\", JSON.stringify(newState));\r\n            return newState;\r\n        }\r\n\r\n        case CONSTANTS.EDIT_CARD: {\r\n            const { text_opis, text, cardId, listId } = action.payload;\r\n            console.log(\"EDIT_CARD reducer called with:\", action.payload);\r\n        \r\n            const newState = state.map(list => {\r\n                if (list.id === listId) {\r\n                    const updatedCards = list.cards.map(card => {\r\n                        if (card.id === cardId) {\r\n                            return {\r\n                                ...card,\r\n                                text,\r\n                                text_opis,\r\n                            };\r\n                        }\r\n                        return card;\r\n                    });\r\n                    return {\r\n                        ...list,\r\n                        cards: updatedCards,\r\n                    };\r\n                }\r\n                return list;\r\n            });\r\n\r\n            return newState;\r\n        }\r\n        \r\n        case CONSTANTS.KILL_CARD:{\r\n            const { listId, cardId } = action.payload;\r\n            console.log(\"KILL_CARD reducer called with:\", action.payload);\r\n\r\n            const newState = state.map(list => {\r\n              if (list.id === listId) {\r\n                const updatedCards = list.cards.filter(card => card.id !== cardId);\r\n                return { ...list, cards: updatedCards };\r\n              }\r\n              return list;\r\n            });\r\n\r\n            return newState;\r\n        }\r\n          \r\n\r\n        case CONSTANTS.ADD_CARD:{\r\n            const newCard = {\r\n                text: action.payload.text,\r\n                text_opis: action.payload.text_opis,\r\n                id: `card-${cardId}`\r\n            }\r\n            cardId += 1;\r\n\r\n            const newState = state.map(list => {\r\n                if(list.id === action.payload.listId){\r\n                    return {\r\n                        ...list,\r\n                        cards: [...list.cards, newCard]\r\n                    }\r\n                } else{\r\n                    return list;\r\n                }\r\n            })\r\n            return newState;\r\n        }\r\n\r\n        case CONSTANTS.DRAG_HAPPENED:{\r\n            const {\r\n                droppableIdStart,\r\n                droppableIdEnd,\r\n                droppableIndexStart,\r\n                droppableIndexEnd,\r\n                draggableId,\r\n                type\r\n            } = action.payload;\r\n\r\n            const newState = [...state];\r\n\r\n            //dragging lists around\r\n            if(type === \"list\") {\r\n                const list = newState.splice(droppableIndexStart, 1);\r\n                newState.splice(droppableIndexEnd, 0, ...list);\r\n                return newState;\r\n            }\r\n\r\n            //in the same list\r\n            if(droppableIdStart === droppableIdEnd){\r\n                const list = state.find(list => droppableIdStart === list.id);\r\n                const card = list.cards.splice(droppableIndexStart, 1);\r\n                list.cards.splice(droppableIndexEnd, 0, ...card)\r\n            }\r\n            // other list\r\n            if(droppableIdStart !== droppableIdEnd){\r\n                //find the list where the drag happened\r\n                const listStart = state.find(list => droppableIdStart === list.id); \r\n                //pull out the card from the list\r\n                const card = listStart.cards.splice(droppableIndexStart, 1);\r\n                //find the list when drag ended\r\n                const listEnd = state.find(list => droppableIdEnd === list.id);\r\n                //put the card in the list\r\n                listEnd.cards.splice(droppableIndexEnd, 0, ...card);\r\n            }\r\n\r\n            return newState;\r\n        }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default listReducer;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}